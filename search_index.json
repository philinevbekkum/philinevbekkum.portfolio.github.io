[["index.html", "Portfolio Data Science for Biology Introduction", " Portfolio Data Science for Biology Philine van Bekkum 05/01/2025 Introduction This GitHub page is written by Philine van Bekkum. I am a third-year Life Science student at University of Applied Sciences Utrecht. I have followed the minor Data Science for Biology, where I developed expertise in data analysis, bioinformatics, and reproducible workflows. This portfolio shows my Data Science skills through various projects. "],["curriculum-vitae.html", "Curriculum Vitae", " Curriculum Vitae Below you can find my CV as a pdf file. "],["identification-of-antibiotic-resistance-genes-in-bacteria.html", "Identification of Antibiotic Resistance Genes in Bacteria AMR package in R Quality control with NanoPlot and NanoFilt Future perspective", " Identification of Antibiotic Resistance Genes in Bacteria During my internship I am going to determine relatedness and resistance within bacteria using Oxford Nanopore whole genome sequencing. During the course Data Science for Biology 2 - Workflows, we got the opportunity to spend extra time developing a skill or make a head start on this that contributes to our future perspective. I chose to focus on the AMR package in R and the NanoPlot/NanoFilt packages from bioconda. The AMR package in R was developed to enable standardized and reproducible AMR data analysis. To be able to learn how to work with this package, I followed the tutorial “How to conduct AMR data analysis” (“How to Conduct AMR Data Analysis” n.d.). After following the tutorial, I searched for a dataset that meets the requirements to work with this package. I used a dataset from the European Centre for Disease Prevention and Control. The dataset shows the occurrence and spread of antimicrobial (antibiotic) resistance in Europe in the years 2012-2015. The data was collected on the resistance to seven microorganisms: Escherichia coli, Klebsiella pneumoniae, Pseudomonas aeruginosa, Acinetobacter species, Streptococcus pneumoniae, Staphylococcus aureus, and Enterococci (“Antimicrobial Resistance Data” n.d.). The NanoPlot package is a package that was specifically developed as a plotting suite for long-read sequencing data and alignments (Coster 2024b). The NanoFilt package is a package that was developed to filter and trim Oxford Nanopore sequencing data (Coster 2024a). To be able to work with the NanoPlot and NanoFilt packages, I used a different dataset. This dataset contained data from the study “Whole genome sequencing of antimicrobial resistant organisms from an Australian ICU.” The sample used was from the bacteria Klebsiella pneumoniae. The technique used was Oxford Nanopore MinION whole genome sequencing. The run I used from this experiment is “ERR10367339.” (“ERR10367339 : Run Browser : SRA Archive : NCBI” n.d.) Below you can find the R code on how I applied the packages to the data. AMR package in R To work with the AMR package in R, you need a dataset that contains phenotypic antimicrobial susceptibility test results, organized around clinical isolates, with the data following standardized guidelines from organizations like EUCAST. The susceptibility result is a column where “S” means susceptible, “R” means resistant, and “I” means intermediate. This is determined by the resistance percentage (R) of isolates to a specific antibiotic, with “S” indicating low resistance (e.g., R &lt; 30%), “R” indicating high resistance (e.g., R &gt; 50%), and “I” indicating intermediate resistance (e.g., 30% ≤ R ≤ 50%). The exact guidelines weren’t available, but based on established practices, the resistance percentage (R) thresholds can be used to categorize the susceptibility results and be used to practice with the package. Set up # Load necessary packages library(dplyr) library(tidyr) library(readxl) library(stringr) library(AMR) library(here) library(ggplot2) Tidy data After the dataset was selected and the susceptibility results were categorized, the data needed to be tidied. Below you can find the R code on how I did this. # Define function for tidy data tidy_data_function &lt;- function(file_path, sheet_number, bacteria, antibioticum, row_range = &quot;A4:M35&quot;) { # Load raw data from the specified file, sheet, and range raw_data &lt;- read_excel(file_path, sheet = sheet_number, range = row_range) # Print column names for inspection print(colnames(raw_data)) # Rename columns to ensure unique and consistent names colnames(raw_data) &lt;- make.unique(c(&quot;Country&quot;, &quot;N_2012&quot;, &quot;R_2012&quot;, &quot;CI_2012&quot;, &quot;N_2013&quot;, &quot;R_2013&quot;, &quot;CI_2013&quot;, &quot;N_2014&quot;, &quot;R_2014&quot;, &quot;CI_2014&quot;, &quot;N_2015&quot;, &quot;R_2015&quot;, &quot;CI_2015&quot;)) # Process and clean the data cleaned_data &lt;- raw_data %&gt;% filter(Country != &quot;EU/EEA (population-\\r\\nweighted mean)&quot;) %&gt;% mutate(across(starts_with(&quot;N_&quot;), ~ as.numeric(replace(., . %in% c(&quot;.&quot;, &quot;.-&quot;, &quot;.-.&quot;, &quot;**&quot;, &quot;-&quot;, &quot;(-)&quot;), NA)))) %&gt;% mutate(across(starts_with(&quot;R_&quot;), ~ { value &lt;- as.numeric(replace(., . %in% c(&quot;.&quot;, &quot;.-&quot;, &quot;.-.&quot;, &quot;**&quot;, &quot;-&quot;, &quot;(-)&quot;), NA)) value[grepl(&quot;^&lt;&quot;, .)] &lt;- as.numeric(gsub(&quot;&lt;&quot;, &quot;&quot;, .[grepl(&quot;^&lt;&quot;, .)])) return(value) })) %&gt;% mutate(across(starts_with(&quot;CI_&quot;), ~ gsub(&quot;\\\\(|\\\\)&quot;, &quot;&quot;, .))) %&gt;% mutate(across(starts_with(&quot;CI_&quot;), ~ replace(., . %in% c(&quot;.&quot;, &quot;.-&quot;, &quot;.-.&quot;, &quot;**&quot;, &quot;-&quot;, &quot;(-)&quot;), NA))) %&gt;% pivot_longer( cols = matches(&quot;^N_|^CI_|^R_&quot;), names_to = c(&quot;.value&quot;, &quot;year&quot;), names_pattern = &quot;([A-Z]+)_(\\\\d+)&quot; ) %&gt;% mutate( bacteria = bacteria, antibioticum = antibioticum, SIR = case_when( R &gt; 50 ~ &quot;R&quot;, R &gt;= 30 &amp; R &lt;= 50 ~ &quot;I&quot;, R &lt; 30 ~ &quot;S&quot;, TRUE ~ NA_character_ ) ) return(cleaned_data) } Tidy data per bacteria After writing the function to tidy the data, the object could be defined for every bacteria. Tidy data Escherichia coli # Define the file path for the Excel file file_path_e_coli &lt;- here::here(&quot;data&quot;, &quot;E_coli.xlsx&quot;) # Define the bacteria name bacteria_e_coli &lt;- &quot;Escherichia coli&quot; # Combine data from multiple sheets of the Excel files into a single dataset e_coli &lt;- bind_rows( tidy_data_function(file_path = file_path_e_coli, sheet_number = 1, bacteria = bacteria_e_coli, antibioticum = &quot;aminopenicillins&quot;), tidy_data_function(file_path = file_path_e_coli, sheet_number = 2, bacteria = bacteria_e_coli, antibioticum = &quot;fluoroquinolones&quot;), tidy_data_function(file_path = file_path_e_coli, sheet_number = 3, bacteria = bacteria_e_coli, antibioticum = &quot;cephalosporins&quot;), tidy_data_function(file_path = file_path_e_coli, sheet_number = 4, bacteria = bacteria_e_coli, antibioticum = &quot;aminoglycosides&quot;), tidy_data_function(file_path = file_path_e_coli, sheet_number = 5, bacteria = bacteria_e_coli, antibioticum = &quot;carbapenems&quot;), ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(e_coli) ## # A tibble: 600 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Sweden 2012 230 28.3 23-35 Escherichia coli aminopenicillins S ## 2 Sweden 2013 452 34.1 30-39 Escherichia coli aminopenicillins I ## 3 Sweden 2014 NA NA &lt;NA&gt; Escherichia coli aminopenicillins &lt;NA&gt; ## 4 Sweden 2015 396 34.1 29-39 Escherichia coli aminopenicillins I ## 5 Finland 2012 2090 39.7 38-42 Escherichia coli aminopenicillins I ## 6 Finland 2013 2124 37.3 35-39 Escherichia coli aminopenicillins I ## 7 Finland 2014 2365 34.7 33-37 Escherichia coli aminopenicillins I ## 8 Finland 2015 2472 36 34-38 Escherichia coli aminopenicillins I ## 9 Iceland 2012 131 44.3 36-53 Escherichia coli aminopenicillins I ## 10 Iceland 2013 121 46.3 37-56 Escherichia coli aminopenicillins I ## # ℹ 590 more rows Tidy data Klebsiella pneumoniae # Define the file path for the Excel file file_path_k_pneumoniae &lt;- here::here(&quot;data&quot;, &quot;K_pneumoniae.xlsx&quot;) # Define the bacteria name bacteria_k_pneumoniae &lt;- &quot;Klebsiella pneumoniae&quot; # Combine data from multiple sheets of the Excel files into a single dataset k_pneumoniae &lt;- bind_rows( tidy_data_function(file_path = file_path_k_pneumoniae, sheet_number = 1, bacteria = bacteria_k_pneumoniae, antibioticum = &quot;fluoroquinolones&quot;), tidy_data_function(file_path = file_path_k_pneumoniae, sheet_number = 2, bacteria = bacteria_k_pneumoniae, antibioticum = &quot;cephalosporins&quot;), tidy_data_function(file_path = file_path_k_pneumoniae, sheet_number = 3, bacteria = bacteria_k_pneumoniae, antibioticum = &quot;aminoglycosides&quot;), tidy_data_function(file_path = file_path_k_pneumoniae, sheet_number = 4, bacteria = bacteria_k_pneumoniae, antibioticum = &quot;carbapenems&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(k_pneumoniae) ## # A tibble: 480 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Iceland 2012 14 7.1 0-34 Klebsiella pneumoniae fluoroquinolones S ## 2 Iceland 2013 28 0 0-12 Klebsiella pneumoniae fluoroquinolones S ## 3 Iceland 2014 28 3.6 0-18 Klebsiella pneumoniae fluoroquinolones S ## 4 Iceland 2015 35 2.9 0-15 Klebsiella pneumoniae fluoroquinolones S ## 5 Finland 2012 536 2.1 1-4 Klebsiella pneumoniae fluoroquinolones S ## 6 Finland 2013 537 2.6 1-4 Klebsiella pneumoniae fluoroquinolones S ## 7 Finland 2014 581 4.6 3-7 Klebsiella pneumoniae fluoroquinolones S ## 8 Finland 2015 658 3.3 2-5 Klebsiella pneumoniae fluoroquinolones S ## 9 Sweden 2012 977 3.7 3-5 Klebsiella pneumoniae fluoroquinolones S ## 10 Sweden 2013 1270 3.9 3-5 Klebsiella pneumoniae fluoroquinolones S ## # ℹ 470 more rows Tidy data Pseudomonas aeruginosa # Define the file path for the Excel file file_path_p_aeruginosa &lt;- here::here(&quot;data&quot;, &quot;P_aeruginosa.xlsx&quot;) # Define the bacteria name bacteria_p_aeruginosa &lt;- &quot;Pseudomonas aeruginosa&quot; # Combine data from multiple sheets of the Excel files into a single dataset p_aeruginosa &lt;- bind_rows( tidy_data_function(file_path = file_path_p_aeruginosa, sheet_number = 2, bacteria = bacteria_p_aeruginosa, antibioticum = &quot;fluoroquinolones&quot;, row_range = &quot;A5:M36&quot;), tidy_data_function(file_path = file_path_p_aeruginosa, sheet_number = 3, bacteria = bacteria_p_aeruginosa, antibioticum = &quot;ceftazidime&quot;, row_range = &quot;A5:M36&quot;), tidy_data_function(file_path = file_path_p_aeruginosa, sheet_number = 4, bacteria = bacteria_p_aeruginosa, antibioticum = &quot;aminoglycosides&quot;, row_range = &quot;A5:M36&quot;), tidy_data_function(file_path = file_path_p_aeruginosa, sheet_number = 5, bacteria = bacteria_p_aeruginosa, antibioticum = &quot;carbapenems&quot;, row_range = &quot;A5:M36&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Cyprus&quot; &quot;52&quot; &quot;15.4&quot; &quot;(7-28)&quot; &quot;47&quot; &quot;4.3&quot; &quot;(1-15)&quot; &quot;42&quot; &quot;9.5&quot; ## [10] &quot;(3-23)&quot; &quot;43&quot; &quot;0&quot; &quot;(0-8)&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(p_aeruginosa) ## # A tibble: 476 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Estonia 2012 32 15.6 5-33 Pseudomonas aeruginosa fluoroquinolones S ## 2 Estonia 2013 20 25 9-49 Pseudomonas aeruginosa fluoroquinolones S ## 3 Estonia 2014 39 10.3 3-24 Pseudomonas aeruginosa fluoroquinolones S ## 4 Estonia 2015 18 0 0-19 Pseudomonas aeruginosa fluoroquinolones S ## 5 Sweden 2012 357 6.7 4-10 Pseudomonas aeruginosa fluoroquinolones S ## 6 Sweden 2013 531 6 4-8 Pseudomonas aeruginosa fluoroquinolones S ## 7 Sweden 2014 338 7.7 5-11 Pseudomonas aeruginosa fluoroquinolones S ## 8 Sweden 2015 382 4.7 3-7 Pseudomonas aeruginosa fluoroquinolones S ## 9 Denmark 2012 389 4.1 2-7 Pseudomonas aeruginosa fluoroquinolones S ## 10 Denmark 2013 408 3.2 2-5 Pseudomonas aeruginosa fluoroquinolones S ## # ℹ 466 more rows Tidy data Acinetobacter spp. # Define the file path for the Excel file file_path_acinetobacter_spp &lt;- here::here(&quot;data&quot;, &quot;Acinetobacter_spp.xlsx&quot;) # Define the bacteria name bacteria_acinetobacter_spp &lt;- &quot;Acinetobacter spp&quot; # Combine data from multiple sheets of the Excel files into a single dataset acinetobacter_spp &lt;- bind_rows( tidy_data_function(file_path = file_path_acinetobacter_spp, sheet_number = 1, bacteria = bacteria_acinetobacter_spp, antibioticum = &quot;fluoroquinolones&quot;, row_range = &quot;A4:M34&quot;), tidy_data_function(file_path = file_path_acinetobacter_spp, sheet_number = 2, bacteria = bacteria_acinetobacter_spp, antibioticum = &quot;aminoglycosides&quot;, row_range = &quot;A4:M34&quot;), tidy_data_function(file_path = file_path_acinetobacter_spp, sheet_number = 3, bacteria = bacteria_acinetobacter_spp, antibioticum = &quot;carbapenems&quot;, row_range = &quot;A4:M34&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(acinetobacter_spp) ## # A tibble: 360 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Belgium 2012 NA NA &lt;NA&gt; Acinetobacter spp fluoroquinolones &lt;NA&gt; ## 2 Belgium 2013 3 NA &lt;NA&gt; Acinetobacter spp fluoroquinolones &lt;NA&gt; ## 3 Belgium 2014 4 NA &lt;NA&gt; Acinetobacter spp fluoroquinolones &lt;NA&gt; ## 4 Belgium 2015 26 0 0-13 Acinetobacter spp fluoroquinolones S ## 5 Finland 2012 NA NA &lt;NA&gt; Acinetobacter spp fluoroquinolones &lt;NA&gt; ## 6 Finland 2013 36 2.8 0-15 Acinetobacter spp fluoroquinolones S ## 7 Finland 2014 31 6.5 1-21 Acinetobacter spp fluoroquinolones S ## 8 Finland 2015 43 2.3 0-12 Acinetobacter spp fluoroquinolones S ## 9 Sweden 2012 NA NA &lt;NA&gt; Acinetobacter spp fluoroquinolones &lt;NA&gt; ## 10 Sweden 2013 74 5.4 1-13 Acinetobacter spp fluoroquinolones S ## # ℹ 350 more rows Tidy data Streptococcus pneumoniae # Define the file path for the Excel file file_path_s_pneumoniae &lt;- here::here(&quot;data&quot;, &quot;S_pneumoniae.xlsx&quot;) # Define the bacteria name bacteria_s_pneumoniae &lt;- &quot;Streptococcus pneumoniae&quot; # Combine data from multiple sheets of the Excel files into a single dataset s_pneumoniae &lt;- bind_rows( tidy_data_function(file_path = file_path_s_pneumoniae, sheet_number = 1, bacteria = bacteria_s_pneumoniae, antibioticum = &quot;penicillin&quot;, row_range = &quot;A4:M33&quot;), tidy_data_function(file_path = file_path_s_pneumoniae, sheet_number = 2, bacteria = bacteria_s_pneumoniae, antibioticum = &quot;macrolides&quot;, row_range = &quot;A4:M33&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(s_pneumoniae) ## # A tibble: 232 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Belgium 2012 1658 1.5 1-2 Streptococcus pneumoniae penicillin S ## 2 Belgium 2013 1536 1.7 1-2 Streptococcus pneumoniae penicillin S ## 3 Belgium 2014 1110 1.3 1-2 Streptococcus pneumoniae penicillin S ## 4 Belgium 2015 1361 0.6 1-2 Streptococcus pneumoniae penicillin S ## 5 Netherlands 2012 1063 1.5 1-2 Streptococcus pneumoniae penicillin S ## 6 Netherlands 2013 1032 1.1 1-2 Streptococcus pneumoniae penicillin S ## 7 Netherlands 2014 1139 2.1 1-3 Streptococcus pneumoniae penicillin S ## 8 Netherlands 2015 1163 1.8 1-2 Streptococcus pneumoniae penicillin S ## 9 Estonia 2012 53 0 0-7 Streptococcus pneumoniae penicillin S ## 10 Estonia 2013 78 1.3 0-7 Streptococcus pneumoniae penicillin S ## # ℹ 222 more rows Tidy data Staphylococcus aureus # Define the file path for the Excel file file_path_s_aureus &lt;- here::here(&quot;data&quot;, &quot;S_aureus.xlsx&quot;) # Define the bacteria name bacteria_s_aureus &lt;- &quot;Staphylococcus aureus&quot; # Combine data from multiple sheets of the Excel files into a single dataset s_aureus &lt;- bind_rows( tidy_data_function(file_path = file_path_s_aureus, sheet_number = 1, bacteria = bacteria_s_aureus, antibioticum = &quot;meticillin&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(s_aureus) ## # A tibble: 120 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Iceland 2012 58 1.7 0-9 Staphylococcus aureus meticillin S ## 2 Iceland 2013 69 0 0-5 Staphylococcus aureus meticillin S ## 3 Iceland 2014 61 3.3 0-11 Staphylococcus aureus meticillin S ## 4 Iceland 2015 88 0 0-4 Staphylococcus aureus meticillin S ## 5 Sweden 2012 3263 0.7 0-1 Staphylococcus aureus meticillin S ## 6 Sweden 2013 4099 1 1-1 Staphylococcus aureus meticillin S ## 7 Sweden 2014 2745 1 1-1 Staphylococcus aureus meticillin S ## 8 Sweden 2015 3124 0.8 1-1 Staphylococcus aureus meticillin S ## 9 Norway 2012 1430 1.3 1-2 Staphylococcus aureus meticillin S ## 10 Norway 2013 1473 0.7 0-1 Staphylococcus aureus meticillin S ## # ℹ 110 more rows Tidy data Enterococcus faecalis # Define the file path for the Excel file file_path_e_faecalis &lt;- here::here(&quot;data&quot;, &quot;E_faecalis.xlsx&quot;) # Define the bacteria name bacteria_e_faecalis &lt;- &quot;Enterococcus faecalis&quot; # Combine data from multiple sheets of the Excel files into a single dataset e_faecalis &lt;- bind_rows( tidy_data_function(file_path = file_path_e_faecalis, sheet_number = 1, bacteria = bacteria_e_faecalis, antibioticum = &quot;gentamicin&quot;), tidy_data_function(file_path = file_path_e_faecalis, sheet_number = 2, bacteria = bacteria_e_faecalis, antibioticum = &quot;vancomycin&quot;) ) ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; ## [1] &quot;Country&quot; &quot;N...2&quot; &quot;%R...3&quot; &quot;(95% CI)...4&quot; &quot;N...5&quot; ## [6] &quot;%R...6&quot; &quot;(95% CI)...7&quot; &quot;N...8&quot; &quot;%R...9&quot; &quot;(95% CI)...10&quot; ## [11] &quot;N...11&quot; &quot;%R...12&quot; &quot;(95% CI)...13&quot; # View the combined dataset print(e_faecalis) ## # A tibble: 240 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Cyprus 2012 77 10.4 5-19 Enterococcus faecalis gentamicin S ## 2 Cyprus 2013 67 26.9 17-39 Enterococcus faecalis gentamicin S ## 3 Cyprus 2014 80 17.5 10-28 Enterococcus faecalis gentamicin S ## 4 Cyprus 2015 58 8.6 3-19 Enterococcus faecalis gentamicin S ## 5 Norway 2012 123 30.1 22-39 Enterococcus faecalis gentamicin I ## 6 Norway 2013 168 26.8 20-34 Enterococcus faecalis gentamicin S ## 7 Norway 2014 270 20.7 16-26 Enterococcus faecalis gentamicin S ## 8 Norway 2015 163 9.8 6-15 Enterococcus faecalis gentamicin S ## 9 France 2012 1528 16.7 15-19 Enterococcus faecalis gentamicin S ## 10 France 2013 1639 14.7 13-17 Enterococcus faecalis gentamicin S ## # ℹ 230 more rows Combined tidy data of every bacteria Combine the datasets of every bacteria. # Combine the datasets of every bacteria combined_data &lt;- bind_rows( e_coli, k_pneumoniae, p_aeruginosa, acinetobacter_spp, s_pneumoniae, s_aureus, e_faecalis ) # View the combined dataset print(combined_data) ## # A tibble: 2,508 × 8 ## Country year N R CI bacteria antibioticum SIR ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Sweden 2012 230 28.3 23-35 Escherichia coli aminopenicillins S ## 2 Sweden 2013 452 34.1 30-39 Escherichia coli aminopenicillins I ## 3 Sweden 2014 NA NA &lt;NA&gt; Escherichia coli aminopenicillins &lt;NA&gt; ## 4 Sweden 2015 396 34.1 29-39 Escherichia coli aminopenicillins I ## 5 Finland 2012 2090 39.7 38-42 Escherichia coli aminopenicillins I ## 6 Finland 2013 2124 37.3 35-39 Escherichia coli aminopenicillins I ## 7 Finland 2014 2365 34.7 33-37 Escherichia coli aminopenicillins I ## 8 Finland 2015 2472 36 34-38 Escherichia coli aminopenicillins I ## 9 Iceland 2012 131 44.3 36-53 Escherichia coli aminopenicillins I ## 10 Iceland 2013 121 46.3 37-56 Escherichia coli aminopenicillins I ## # ℹ 2,498 more rows Wide data for AMR package functions To be able to analyze the data with the AMR package, the data needs to be in a wide format. # Define the function to create a wide format create_wide_format &lt;- function(data) { data %&gt;% distinct(Country, year, bacteria, antibioticum, .keep_all = TRUE) %&gt;% pivot_wider( names_from = antibioticum, # Pivot antibiotics into columns values_from = SIR, # Fill columns with SIR values values_fill = list(SIR = NA) # Fill missing SIR values with NA ) } # Create wide format with the create_wide_format function wide_data &lt;- create_wide_format(combined_data) print(wide_data) ## # A tibble: 2,411 × 17 ## Country year N R CI bacteria aminopenicillins fluoroquinolones ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Sweden 2012 230 28.3 23-35 Escherichia coli S &lt;NA&gt; ## 2 Sweden 2013 452 34.1 30-39 Escherichia coli I &lt;NA&gt; ## 3 Sweden 2014 NA NA &lt;NA&gt; Escherichia coli &lt;NA&gt; &lt;NA&gt; ## 4 Sweden 2015 396 34.1 29-39 Escherichia coli I &lt;NA&gt; ## 5 Finland 2012 2090 39.7 38-42 Escherichia coli I &lt;NA&gt; ## 6 Finland 2013 2124 37.3 35-39 Escherichia coli I &lt;NA&gt; ## 7 Finland 2014 2365 34.7 33-37 Escherichia coli I &lt;NA&gt; ## 8 Finland 2015 2472 36 34-38 Escherichia coli I &lt;NA&gt; ## 9 Iceland 2012 131 44.3 36-53 Escherichia coli I &lt;NA&gt; ## 10 Iceland 2013 121 46.3 37-56 Escherichia coli I &lt;NA&gt; ## # ℹ 2,401 more rows ## # ℹ 9 more variables: cephalosporins &lt;chr&gt;, aminoglycosides &lt;chr&gt;, carbapenems &lt;chr&gt;, ## # ceftazidime &lt;chr&gt;, penicillin &lt;chr&gt;, macrolides &lt;chr&gt;, meticillin &lt;chr&gt;, ## # gentamicin &lt;chr&gt;, vancomycin &lt;chr&gt; # Convert &quot;bacteria&quot; column to microorganism (mo) class wide_data$bacteria &lt;- as.mo(wide_data$bacteria, info = TRUE) # Convert SIR-eligible columns to SIR class wide_data &lt;- wide_data %&gt;% mutate_if(is_sir_eligible, as.sir) # Display the data frame and its summary wide_data ## # A tibble: 2,411 × 17 ## Country year N R CI bacteria aminopenicillins fluoroquinolones ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;mo&gt; &lt;sir&gt; &lt;sir&gt; ## 1 Sweden 2012 230 28.3 23-35 B_ESCHR_COLI S NA ## 2 Sweden 2013 452 34.1 30-39 B_ESCHR_COLI I NA ## 3 Sweden 2014 NA NA &lt;NA&gt; B_ESCHR_COLI NA NA ## 4 Sweden 2015 396 34.1 29-39 B_ESCHR_COLI I NA ## 5 Finland 2012 2090 39.7 38-42 B_ESCHR_COLI I NA ## 6 Finland 2013 2124 37.3 35-39 B_ESCHR_COLI I NA ## 7 Finland 2014 2365 34.7 33-37 B_ESCHR_COLI I NA ## 8 Finland 2015 2472 36 34-38 B_ESCHR_COLI I NA ## 9 Iceland 2012 131 44.3 36-53 B_ESCHR_COLI I NA ## 10 Iceland 2013 121 46.3 37-56 B_ESCHR_COLI I NA ## # ℹ 2,401 more rows ## # ℹ 9 more variables: cephalosporins &lt;sir&gt;, aminoglycosides &lt;sir&gt;, carbapenems &lt;sir&gt;, ## # ceftazidime &lt;sir&gt;, penicillin &lt;sir&gt;, macrolides &lt;sir&gt;, meticillin &lt;sir&gt;, ## # gentamicin &lt;sir&gt;, vancomycin &lt;sir&gt; summary(wide_data) ## Country year N R ## Length:2411 Length:2411 Min. : 1.0 Min. : 0.00 ## Class :character Class :character 1st Qu.: 132.0 1st Qu.: 5.80 ## Mode :character Mode :character Median : 390.5 Median :15.05 ## Mean : 1020.6 Mean :22.35 ## 3rd Qu.: 1041.5 3rd Qu.:32.60 ## Max. :11055.0 Max. :95.30 ## NA&#39;s :25 NA&#39;s :53 ## CI bacteria aminopenicillins fluoroquinolones ## Length:2411 Class :mo Class:sir Class:sir ## Class :character &lt;NA&gt; :0 %R :73.9% (n=88) %R :16.4% (n=74) ## Mode :character Unique:7 %SI :26.1% (n=31) %SI :83.6% (n=377) ## #1 :B_ESCHR_COLI - %S : 0.8% (n=1) - %S :64.3% (n=290) ## #2 :B_KLBSL_PNMN - %I :25.2% (n=30) - %I :19.3% (n=87) ## #3 :B_PSDMN_AERG ## ## cephalosporins aminoglycosides carbapenems ceftazidime ## Class:sir Class:sir Class:sir Class:sir ## %R :14.2% (n=34) %R :15.7% (n=70) %R :10.6% (n=48) %R : 3.3% (n=4) ## %SI :85.8% (n=206) %SI :84.3% (n=377) %SI :89.4% (n=403) %SI :96.7% (n=116) ## - %S :72.9% (n=175) - %S :74.7% (n=334) - %S :83.4% (n=376) - %S :91.7% (n=110) ## - %I :12.9% (n=31) - %I : 9.6% (n=43) - %I : 6.0% (n=27) - %I : 5.0% (n=6) ## ## ## penicillin macrolides meticillin gentamicin ## Class:sir Class:sir Class:sir Class:sir ## %R : 0.0% (n=0) %R : 0.0% (n=0) %R : 5.0% (n=6) %R :10.6% (n=12) ## %SI :100.0% (n=113) %SI :100.0% (n=112) %SI :95.0% (n=114) %SI :89.4% (n=101) ## - %S :92.0% (n=104) - %S :89.3% (n=100) - %S :80.0% (n=96) - %S :39.8% (n=45) ## - %I : 8.0% (n=9) - %I :10.7% (n=12) - %I :15.0% (n=18) - %I :49.6% (n=56) ## ## ## vancomycin ## Class:sir ## %R : 0.0% (n=0) ## %SI :100.0% (n=118) ## - %S :95.8% (n=113) ## - %I : 4.2% (n=5) ## ## # Count unique values in each column sapply(wide_data, n_distinct) ## Country year N R CI ## 31 4 1200 663 982 ## bacteria aminopenicillins fluoroquinolones cephalosporins aminoglycosides ## 7 4 4 4 4 ## carbapenems ceftazidime penicillin macrolides meticillin ## 4 4 3 3 4 ## gentamicin vancomycin ## 4 3 # Count microorganisms by name, sorted by frequency wide_data %&gt;% count(mo_name(bacteria), sort = TRUE) ## # A tibble: 7 × 2 ## `mo_name(bacteria)` n ## &lt;chr&gt; &lt;int&gt; ## 1 Escherichia coli 599 ## 2 Klebsiella pneumoniae 470 ## 3 Pseudomonas aeruginosa 456 ## 4 Acinetobacter 296 ## 5 Enterococcus faecalis 240 ## 6 Streptococcus pneumoniae 230 ## 7 Staphylococcus aureus 120 # Filter rows with restance (&quot;R&quot;) to aminoglycosides wide_data %&gt;% filter(any(aminoglycosides() == &quot;R&quot;)) ## # A tibble: 12 × 17 ## Country year N R CI bacteria aminopenicillins fluoroquinolones ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;mo&gt; &lt;sir&gt; &lt;sir&gt; ## 1 Latvia 2013 54 61.1 47-74 B_ENTRC_FCLS NA NA ## 2 Lithuania 2012 59 50.8 37-64 B_ENTRC_FCLS NA NA ## 3 Lithuania 2013 44 54.5 39-70 B_ENTRC_FCLS NA NA ## 4 Hungary 2012 452 56.2 51-61 B_ENTRC_FCLS NA NA ## 5 Hungary 2013 602 51.7 48-56 B_ENTRC_FCLS NA NA ## 6 Italy 2012 301 50.8 45-57 B_ENTRC_FCLS NA NA ## 7 Italy 2014 516 55.2 51-60 B_ENTRC_FCLS NA NA ## 8 Slovak Republic 2012 179 50.3 43-58 B_ENTRC_FCLS NA NA ## 9 Slovak Republic 2013 209 57.4 50-64 B_ENTRC_FCLS NA NA ## 10 Romania 2012 51 56.9 42-71 B_ENTRC_FCLS NA NA ## 11 Romania 2013 80 58.8 47-70 B_ENTRC_FCLS NA NA ## 12 Romania 2014 34 76.5 59-89 B_ENTRC_FCLS NA NA ## # ℹ 9 more variables: cephalosporins &lt;sir&gt;, aminoglycosides &lt;sir&gt;, carbapenems &lt;sir&gt;, ## # ceftazidime &lt;sir&gt;, penicillin &lt;sir&gt;, macrolides &lt;sir&gt;, meticillin &lt;sir&gt;, ## # gentamicin &lt;sir&gt;, vancomycin &lt;sir&gt; Antibiogram To be able to make an antibiogram, first the resistance percentage was calculated from the combined data. # Calculate the resistance percentage resistance_analysis &lt;- combined_data %&gt;% filter(SIR == &quot;R&quot;) %&gt;% group_by(bacteria, antibioticum) %&gt;% summarise(R_count = n(), .groups = &#39;drop&#39;) %&gt;% left_join( combined_data %&gt;% group_by(bacteria, antibioticum) %&gt;% summarise(total_count = n(), .groups = &#39;drop&#39;), by = c(&quot;bacteria&quot;, &quot;antibioticum&quot;) ) %&gt;% mutate(resistance_percentage = (R_count / total_count) * 100) # Create an antibiogram antibiogram &lt;- resistance_analysis %&gt;% dplyr::select(bacteria, antibioticum, resistance_percentage) %&gt;% pivot_wider( names_from = antibioticum, values_from = resistance_percentage, values_fill = 0 ) # View the antibiogram print(antibiogram) ## # A tibble: 6 × 9 ## bacteria aminoglycosides carbapenems fluoroquinolones gentamicin aminopenicillins ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Acinetobacter s… 32.5 31.7 38.3 0 0 ## 2 Enterococcus fa… 0 0 0 10 0 ## 3 Escherichia coli 0 0 0.833 0 73.3 ## 4 Klebsiella pneu… 22.5 3.33 17.5 0 0 ## 5 Pseudomonas aer… 3.45 5 5 0 0 ## 6 Staphylococcus … 0 0 0 0 0 ## # ℹ 3 more variables: cephalosporins &lt;dbl&gt;, ceftazidime &lt;dbl&gt;, meticillin &lt;dbl&gt; # Plot resistance analysis ggplot(resistance_analysis, aes(x = antibioticum, y = bacteria, fill = resistance_percentage)) + geom_tile() + scale_fill_gradient(low = &quot;white&quot;, high = &quot;darkgreen&quot;) + theme(axis.text.x = element_text(angle = 45, hjust = 1)) + labs(title = &quot;Resistance percentage per bacteria/antibiotic&quot;, x = &quot;Antibiotic&quot;, y = &quot;Bacteria&quot;, fill = &quot;Resistance percentage&quot;) Figure 1. Resistance percentage per bacteria and antibiotic. Quality control with NanoPlot and NanoFilt The quality control of the ERR10367339 dataset was done on a server and not in this bookdown locally. This was done because the server has more computational power, which made it easier to work with this data. Also, the files were too big to be shared via GitHub. If you want full access to the SRA, FASTQ, FASTQC, and NanoPlot files, feel free to contact me at philine.vanbekkum@student.hu.nl. Below you can find the code I executed and the results. # Navigate to your home directory and run the following command to download the script wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh # After the script has been downloaded, execute it with the following command bash Miniconda3-latest-Linux-x86_64.sh -b # Navigate to the window where your files are displayed # Click on More -&gt; Show Hidden Files to view hidden files in your home directory # Locate the .bashrc File # Edit the .bashrc file by adding the following lines # Adding path to miniconda export PATH=&quot;$HOME/miniconda3/bin:$PATH&quot; # After making the changes, save the file and close it # Go back to More -&gt; Show Hidden Files to hide hidden files in your file viewer # In the terminal, type the following command to initialize conda conda init bash # Close the terminal and open a new one, this step is necessary to initialize miniconda # Create a new conda environment conda create --name amr_analysis # Activate the newly created conda environment conda activate amr_analysis # Install the SRA tolls from bioconda conda install -c bioconda sra-tools # Prefetch the SRA file prefetch ERR10367339 # Convert the downloaded SRA file to fastq format fastq-dump --split-files --outdir &quot;./data&quot; &quot;./data/ERR10367339.sra&quot; # Run fastqc on the fastq file to assess the quality of the sequencing data fastqc ERR10367339 # Install NanoPlot pip install NanoPlot # List available color options and color maps for NanoPlot NanoPlot --listcolors NanoPlot --listcolormaps # Generate kde plots NanoPlot --fastq ERR10367339.fastq --plots kde -o plots_kde # Generate dot plots with navy color NanoPlot --fastq ERR10367339.fastq --plots dot -o plots_dot -c navy # Generate quality control results of the fastq file # When using this, the different kde and dot plots will be generated NanoPlot --fastq ERR10367339.fastq -o QC_Results # Install NanoFilt pip install nanofilt # Filter the fastq files to retain reads with a quality score of 10 or higher cat ERR10367339.fastq | NanoFilt -q 10 &gt; filtered_reads.fastq Below you can find part of the FastQC Report. FastQC Report: per base sequence quality Figure 2. Per base sequence quality. Figure 2 shows that the average quality of the sequences is good with scores in the green area (indicative of high quality). When the bases get further into the sequence, the quality decreases, which shows a lower quality. This pattern is typical for sequence data because the quality decreases with longer read lengths. The fluctuations and broader interquartile ranges in the later bases indicate inconsistent and potentially unreliable data in those regions. FastQC Report: per sequence quality scores Figure 3. Per sequence quality scores. Figure 3 shows a high peak with low-quality scores at around a Phred score of 7-10, which shows that a large amount of sequences has a low quality. The second peak at higher quality scores around a Phred score of 22-30 shows that there is a subset of sequences with a better, acceptable quality. This distribution could possibly be a technical problem. Below you can find the NanoPlot report. The full NanoPlot reports are available on my GitHub page: NanoPlot report kde and NanoPlot report dot. NanoPlot: Weighted histogram of read lengths Figure 4. Weighted histogram of reads length. Figure 4 shows the weighted histogram of read lengths. The distribution of read lengths shows that there is a high frequency of short reads, with a decrease when the read length increases. Most reads are shorter than 20k, while the longer reads (80-100k) are significantly less frequent. NanoPlot: Weighted histogram of read lengths after log transformation Figure 5. Weighted histogram of reads length after log transformation. Figure 5 shows the weighted histogram of read lengths after log transformation. After log transformation, the distribution of read lengths is more even. This indicates that the distribution is log-normal. This pattern is typical for sequencing data, where a wide range of lengths occurs, but most values concentrate around a specific range. NanoPlot: Non weighted histogram of read lengths Figure 6. Non weighted histogram of reads length. Figure 6 shows the non-weighted histogram of reads length. The majority of the reads are short, under 20k, with a distinct peak around the shortest reads. The frequency decreases when the read lengths increase. This results in a strongly right-skewed distribution. NanoPlot: Non weighted histogram of read lengths after log transformation Figure 7. Non weighted histogram of reads length after log transformation. Figure 7 shows the non-weighted histogram of reads length after log transformation. This results in a more evenly distributed plot than figure 5. This gives a better insight into the distribution of the read lengths across different scales. The majority of the reads are between 100 and 10,000 (after log transformation), with a peak around a few hundred base pairs. The tail of the distribution shows that longer reads are less frequent but still present. NanoPlot: Yield by length Figure 8. Yield by length. Figure 8 shows the yield by length. The cumulative yield shows that the majority of the total sequence data is provided by shorter reads. Beyond approximately 40k, further lengthening of the reads contributes only minimally to the total yield. Nanoplot: Read lengths vs Average read quality kde plot Figure 9. Read lengths vs Average read quality kde plot. Figure 9 shows the read length vs. average read length generated with kernel density estimation. The plot shows that there is a high concentration of short reads with an average read length between 10-15. The distribution of long reads shows a lower density, which suggests that long reads have a lower and less consistent quality. NanoPlot: Read lengths vs Average read quality using dots Figure 10. Read lengths vs Average read quality using dots. Figure 10 shows the read length vs. average read length generated with data points (dots). As the read lengths increase, the data points become more sparsely distributed, indicating that longer reads occur less frequently. The average read quality stays under 20 and varies less for longer reads. Future perspective In the future, I aim to improve my skills working with the AMR, NanoPlot, and NanoFilt packages. Additionally, I intend to focus on improving the reproducibility of the analyses I conduct. My goal is to apply the knowledge and skills I learned to practical, real-world scenarios. "],["guerilla-analytics.html", "Guerilla Analytics", " Guerilla Analytics The Guerrilla Analytics principles, written by Enda Ridge, offer a practical and hands-on framework for setting up a data management workflow. This framework is particularly useful for teams and helps create a structured work environment. Below, you can find an example of the Guerrilla Analytics principles applied to a past project. Figure 1. Guerilla analytics applied to a past project. Below you can also find the structure of this bookdown project following the Guerrilla Analytics principle. # Load necessary libraries library(fs) # Visualize the folder structure dir_tree() ## . ## ├── 01_CurriculumVitae_PhilinevanBekkum.Rmd ## ├── 02_Antibiotic_resistance.Rmd ## ├── 03_Guerilla_analytics.Rmd ## ├── 04_Celegans_plate_experiment.Rmd ## ├── 05_Open_Peer_Review.Rmd ## ├── 06_Creating_R_Packages.Rmd ## ├── 07_Project_Hack_the_VITEK.Rmd ## ├── 08_Parameters.Rmd ## ├── 09_Bibliography.Rmd ## ├── css ## │ └── style.css ## ├── data ## │ ├── Acinetobacter_spp.xlsx ## │ ├── CE.LIQ.FLOW.062_Tidydata.xlsx ## │ ├── COVID_data.csv ## │ ├── CV_Philine_van_Bekkum_Portfolio.pdf ## │ ├── Data_share_covid-19-vaccination_2020-10-04.csv ## │ ├── E_coli.xlsx ## │ ├── E_faecalis.xlsx ## │ ├── K_pneumoniae.xlsx ## │ ├── NanoPlot-report_dot.html ## │ ├── NanoPlot-report_kde.html ## │ ├── P_aeruginosa.xlsx ## │ ├── S_aureus.xlsx ## │ └── S_pneumoniae.xlsx ## ├── dsfb2_workflows_portfolio2.Rproj ## ├── figures ## │ ├── antibiogram-1.png ## │ ├── business by country by income-1.png ## │ ├── fastqc_per_base_sequence_quality.png ## │ ├── fastqc_per_sequence_quality_scores.png ## │ ├── guerilla_analytics_daur2.png ## │ ├── LengthvsQualityScatterPlot_dot.png ## │ ├── LengthvsQualityScatterPlot_kde.png ## │ ├── Non_weightedHistogramReadlength.png ## │ ├── Non_weightedLogTransformed_HistogramReadlength.png ## │ ├── scatterplot of two variables-1.png ## │ ├── scatterplot with normalized data-1.png ## │ ├── scatterplot-1.png ## │ ├── vaccine by country by education-1.png ## │ ├── WeightedHistogramReadlength.png ## │ ├── WeightedLogTransformed_HistogramReadlength.png ## │ └── Yield_By_Length.png ## ├── index.Rmd ## ├── libs ## │ ├── crosstalk-1.2.1 ## │ │ ├── css ## │ │ ├── js ## │ │ └── scss ## │ ├── gitbook-2.6.7 ## │ │ ├── css ## │ │ │ └── fontawesome ## │ │ └── js ## │ ├── htmltools-fill-0.5.8.1 ## │ ├── htmlwidgets-1.6.4 ## │ ├── jquery-3.6.0 ## │ ├── plotly-binding-4.10.4 ## │ ├── plotly-htmlwidgets-css-2.11.1 ## │ ├── plotly-main-2.11.1 ## │ └── typedarray-0.1 ## ├── LICENSE ## ├── packages.bib ## ├── raw_data ## │ ├── Acinetobacter, Tables 3-21 to 3-25.xlsx ## │ ├── CE.LIQ.FLOW.062_Tidydata.xlsx ## │ ├── COVID_data.csv ## │ ├── Data_share_covid-19-vaccination_2020-10-04.csv ## │ ├── E-coli, Tables 3-1 to 3-7.xlsx ## │ ├── Enterococci, Tables 3-30 and 3-31.xlsx ## │ ├── Klebsiella, Tables 3-8 to 3-13.xlsx ## │ ├── Pseudomonas, Tables 3-14 to 3-20.xlsx ## │ ├── Staphylococcus, Table 3-29.xlsx ## │ └── Streptococcus, Tables 3-26 to 3-28.xlsx ## ├── README.md ## ├── references.bib ## ├── _book ## │ ├── 404.html ## │ ├── bibliography.html ## │ ├── c.-elegans-plate-experiment.html ## │ ├── creating-r-packages.html ## │ ├── css ## │ │ └── style.css ## │ ├── curriculum-vitae.html ## │ ├── data ## │ │ └── CV_Philine_van_Bekkum_Portfolio.pdf ## │ ├── figures ## │ │ ├── antibiogram-1.png ## │ │ ├── business by country by income-1.png ## │ │ ├── fastqc_per_base_sequence_quality.png ## │ │ ├── fastqc_per_sequence_quality_scores.png ## │ │ ├── guerilla_analytics_daur2.png ## │ │ ├── LengthvsQualityScatterPlot_dot.png ## │ │ ├── LengthvsQualityScatterPlot_kde.png ## │ │ ├── Non_weightedHistogramReadlength.png ## │ │ ├── Non_weightedLogTransformed_HistogramReadlength.png ## │ │ ├── scatterplot of two variables-1.png ## │ │ ├── scatterplot with normalized data-1.png ## │ │ ├── scatterplot-1.png ## │ │ ├── vaccine by country by education-1.png ## │ │ ├── WeightedHistogramReadlength.png ## │ │ ├── WeightedLogTransformed_HistogramReadlength.png ## │ │ └── Yield_By_Length.png ## │ ├── guerilla-analytics.html ## │ ├── identification-of-antibiotic-resistance-genes-in-bacteria.html ## │ ├── index.html ## │ ├── libs ## │ │ ├── crosstalk-1.2.1 ## │ │ │ ├── css ## │ │ │ │ └── crosstalk.min.css ## │ │ │ └── js ## │ │ │ └── crosstalk.min.js ## │ │ ├── gitbook-2.6.7 ## │ │ │ ├── css ## │ │ │ │ ├── fontawesome ## │ │ │ │ │ └── fontawesome-webfont.ttf ## │ │ │ │ ├── plugin-bookdown.css ## │ │ │ │ ├── plugin-clipboard.css ## │ │ │ │ ├── plugin-fontsettings.css ## │ │ │ │ ├── plugin-highlight.css ## │ │ │ │ ├── plugin-search.css ## │ │ │ │ ├── plugin-table.css ## │ │ │ │ └── style.css ## │ │ │ └── js ## │ │ │ ├── app.min.js ## │ │ │ ├── clipboard.min.js ## │ │ │ ├── jquery.highlight.js ## │ │ │ ├── plugin-bookdown.js ## │ │ │ ├── plugin-clipboard.js ## │ │ │ ├── plugin-fontsettings.js ## │ │ │ ├── plugin-search.js ## │ │ │ └── plugin-sharing.js ## │ │ ├── htmltools-fill-0.5.8.1 ## │ │ │ └── fill.css ## │ │ ├── htmlwidgets-1.6.4 ## │ │ │ └── htmlwidgets.js ## │ │ ├── jquery-3.6.0 ## │ │ │ └── jquery-3.6.0.min.js ## │ │ ├── plotly-binding-4.10.4 ## │ │ │ └── plotly.js ## │ │ ├── plotly-htmlwidgets-css-2.11.1 ## │ │ │ └── plotly-htmlwidgets.css ## │ │ ├── plotly-main-2.11.1 ## │ │ │ └── plotly-latest.min.js ## │ │ └── typedarray-0.1 ## │ │ └── typedarray.min.js ## │ ├── open-peer-review.html ## │ ├── parameterized-report-of-covid-19-data-from-ecdc.html ## │ ├── project-hack-the-vitek.html ## │ ├── references-1.html ## │ ├── search_index.json ## │ └── _main_files ## │ └── figure-html ## │ └── antibiogram-1.png ## ├── _main.Rmd ## └── _main_files ## └── figure-html ## └── antibiogram-1.png "],["c.-elegans-plate-experiment.html", "C. elegans Plate Experiment Introduction Set up Importing the data Inspecting the data types Scatterplot of C. elegans plate experiment Normalizing the data for the negative control Scatterplot of C. elegans plate experiment with normalized data Analyzing the C. elegans experiment", " C. elegans Plate Experiment Introduction The data presented in this document was kindly provided by J. Louter (INT/ILC) and stems from an experiment that investigated the effect of various compounds on C. elegans nematodes. In this experiment, adult C. elegans were exposed to different concentrations of compounds, and the number of offspring produced by each nematode was counted. The key variables in this dataset include: RawData: The number of offspring counted (the outcome). compName: The name of the compound or chemical used in the experiment. compConcentration: The concentration of the compound (in nM). expType: The type of experimental condition (e.g., positive control, negative control, vehicle A control, experiment). Set up # Load necessary libraries library(readxl) library(dplyr) library(ggplot2) library(drc) library(readr) library(stringr) library(tidyr) Importing the data The first step is to import the data from the provided Excel file, which contains the results of the experiment. # Import data from C. elegans plate experiment plate_experiment_data &lt;- read_excel(&quot;data/CE.LIQ.FLOW.062_Tidydata.xlsx&quot;) Inspecting the data types Next, we inspect the structure of the data to ensure it has been imported correctly. We also check for the data types of key columns. # Check the structure of the data. print(class(plate_experiment_data$RawData)) ## [1] &quot;numeric&quot; print(class(plate_experiment_data$compName)) ## [1] &quot;character&quot; print(class(plate_experiment_data$compConcentration)) ## [1] &quot;character&quot; print(class(plate_experiment_data$expType)) ## [1] &quot;character&quot; # Check if data is correctly imported. plate_experiment_data %&gt;% dplyr::select(RawData, compName, compConcentration, expType) ## # A tibble: 360 × 4 ## RawData compName compConcentration expType ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 44 2,6-diisopropylnaphthalene 4.99 experiment ## 2 37 2,6-diisopropylnaphthalene 4.99 experiment ## 3 45 2,6-diisopropylnaphthalene 4.99 experiment ## 4 47 2,6-diisopropylnaphthalene 4.99 experiment ## 5 41 2,6-diisopropylnaphthalene 4.99 experiment ## 6 35 2,6-diisopropylnaphthalene 4.99 experiment ## 7 41 2,6-diisopropylnaphthalene 4.99 experiment ## 8 36 2,6-diisopropylnaphthalene 4.99 experiment ## 9 40 2,6-diisopropylnaphthalene 4.99 experiment ## 10 38 2,6-diisopropylnaphthalene 4.99 experiment ## # ℹ 350 more rows # Create a copy of the plate_experiment data to tidy and ensure the original data is preserved plate_experiment_tidydata &lt;- plate_experiment_data # Convert the compConcentration column to numeric type plate_experiment_tidydata$compConcentration &lt;- as.numeric(plate_experiment_tidydata$compConcentration) There is a small issue with the compConcentration column where a comma (,) was mistakenly used instead of a period (.), resulting in NA values. We correct this by replacing the comma with a period and ensuring all values are numeric. # Locate the NA value in the compConcentration column. character_placement &lt;- which(is.na(plate_experiment_tidydata$compConcentration)) # Convert the character value to numeric, handling commas. character_value &lt;- plate_experiment_data$compConcentration[character_placement] %&gt;% str_replace(&quot;,&quot;, &quot;.&quot;) %&gt;% parse_number() # Update the compConcentration column plate_experiment_tidydata$compConcentration[character_placement] &lt;- character_value # Check the class of compConcentration after conversion. print(class(plate_experiment_tidydata$compConcentration)) ## [1] &quot;numeric&quot; # Check for any NA values after conversion sum(is.na(plate_experiment_tidydata$compConcentration)) ## [1] 0 Scatterplot of C. elegans plate experiment To visualize the effect of compound concentration on offspring count, a scatterplot was created. The x-axis represents the log-transformed concentration of the compound (in nM), and the y-axis represents the raw number of offspring. The points are color-coded by the compound name and shaped by the experimental condition type. # Plot the scatterplot plate_experiment_tidydata %&gt;% ggplot(aes(x = log10(compConcentration), y = RawData, color = compName, shape = expType)) + geom_jitter(width = 0.1, height = 0.1) + labs(x = &quot;Log10 Concentration of Compound (in nM)&quot;, y = &quot;Number of Offspring per C. elegans&quot;, color = &quot;Compound Name&quot;, shape = &quot;Experiment Type&quot;, title = &quot;Effect of Compound Concentration on Offspring Count in C. elegans&quot;, subtitle = &quot;Data provided by J. Louter (INT/ILC)&quot;) + scale_shape_discrete(labels = c(&quot;Negative Control&quot;, &quot;Positive Control&quot;, &quot;Vehicle A Control&quot;, &quot;Experiment&quot;)) + theme_classic() Figure 1. Scatterplot showing the effect of compound concentration on offspring count in C. elegans across different experimental conditions. The positive control of this experiment is “Ethanol”. The negative control of this experiment is “No treatment”. Normalizing the data for the negative control To facilitate comparison across experimental conditions, I normalized the raw offspring counts relative to the negative control group (“S-medium”). This adjustment accounts for baseline variability and enables more accurate comparisons between experimental conditions. # Compute the mean for the negative control group &quot;S-medium&quot;. mean_controlNegative &lt;- mean(plate_experiment_tidydata$RawData [plate_experiment_tidydata$compName == &quot;S-medium&quot;], na.rm = TRUE) # Create RawData_normalized column with the normalized raw data. plate_experiment_tidydata$RawData_normalized &lt;- plate_experiment_tidydata$RawData / mean_controlNegative # Compute the mean of the normalized data for the negative control group. mean(plate_experiment_tidydata$RawData [plate_experiment_tidydata$compName == &quot;S-medium&quot;], na.rm = TRUE) ## [1] 85.9 Scatterplot of C. elegans plate experiment with normalized data With the data normalized, we can generate another scatterplot to visualize the relationship between compound concentration and offspring count. This time, the y-axis reflects the normalized number of offspring. # Plot a scatterplot with the normalized data plate_experiment_tidydata %&gt;% ggplot(aes(x = log10(compConcentration), y = RawData_normalized, color = compName, shape = expType)) + geom_jitter(width = 0.1, height = 0.1) + labs(x = &quot;Log10 Concentration of Compound (in nM)&quot;, y = &quot;Normalized Number of Offspring per C. elegans&quot;, color = &quot;Compound Name&quot;, shape = &quot;Experiment Type&quot;, title = &quot;Effect of Compound Concentration on Offspring Count in C. elegans&quot;, subtitle = &quot;Data provided by J. Louter (INT/ILC)&quot;) + scale_shape_discrete(labels = c(&quot;Negative Control&quot;, &quot;Positive Control&quot;, &quot;Vehicle A Control&quot;, &quot;Experiment&quot;)) + theme_classic() Figure 2. Scatterplot of the effect of compound concentration on normalized offspring count in C. elegans. The normalization process makes it easier to compare the effects of different compounds, accounting for baseline differences in offspring count. Analyzing the C. elegans experiment Below you can find a stepwise plan to analyze the experiment and determine the effect of different concentrations on offspring count and whether the different compounds have different IC50 curves. Step 1: Data exploration Ensure all data columns are complete and correctly formatted. Calculate mean, median, and range of offspring counts (RawData) by compound and concentration. Use visualizations and statistical tests to check if the data is normally distributed. Step 2: Investigating dose-response relationships Apply log transformation to compound concentrations for variance stabilization. Create scatterplots or smoothed curves to visualize relationships between concentration and offspring counts for each compound. Step 3: Statistical tests for effects of concentration Use ANOVA to test for significant differences in offspring counts across concentrations and compounds. If ANOVA is significant, perform post-hoc tests to identify significant differences between groups. Step 4: Estimation of dose-response curves Use the drc package to fit dose-response models and estimate IC50 values for each compound. Statistically compare IC50 values across compounds to determine which are more or less potent. Step 5: Visualizing results Plot fitted dose-response curves for all compounds, including confidence intervals, to facilitate comparisons. Compile IC50 values and confidence intervals into a clear summary table. Step 6: Interpretation and conclusions Highlight key results, including significant effects of concentrations and differences in IC50 values. Discuss the implications of findings for understanding the effects of compounds on C. elegans. "],["open-peer-review.html", "Open Peer Review Evaluation of Transparency and Reproducibility Evaluation of Code Quality and Reproducibility", " Open Peer Review Evaluation of Transparency and Reproducibility The selected article, “A virus that has gone viral: Amino acid mutation in S protein of Indian isolate of Coronavirus COVID-19 might impact receptor binding and thus infectivity”, examines amino acid mutations in the spike protein of SARS-CoV-2 isolates from India and their potential impact on receptor binding and infectivity (Saha et al. 2020). The transparency of the selected study was evaluated based on predefined criteria for reproducibility and reporting practices, as described by Summer et al. (2020) (“Reproducibility and Reporting Practices in COVID-19 Preprint Manuscripts” n.d.) in their work on reproducibility and reporting practices in COVID-19 preprint manuscripts. The table below summaries the findings. Table 1. Transparency Criteria Transparency Criteria Response Type Study Purpose TRUE Data Availability Statement FALSE Data Location GenBank Study Location TRUE; India Author Review Professional; Contact information is available Ethics Statement FALSE Funding Statement TRUE Code Availability FALSE General Aim The general aim of this article was to analyze and compare mutations in the spike protein Indian SARS-CoV-2 isolates compared to Wuhan and Italian isolates, to identify notable features, especially mutations that could affect viral infectivity. Methods The researchers obtained complete spike protein sequences of SARS-CoV-2 from GenBank, including sequences 17 sequences from Wuhan, one from Italy, and two from India (isolates 29 and 166). Sequence alignments were performed using NCBI BLAST, CLUSTAL W, and CLUSTAL OMEGA. Secondary structure prediction was done using CFSSP server, and mutation analysis was done using Mutprep server. JMol and ConSurf tools were used to predict protein structure. Further kinetics and structure analyses were performed using Dynemut Server and Chimera version 11. Results All 17 sequences from Wuhan were identical and matched completely with the sequence from Italy. However two Indian isolates (29 en 166) showed notable mutations. Isolate 19 had a deletion mutation of tyrosine at position 144 and a substitution mutation from arginine to isoleucine at position 407, affecting the receptor-binding domain. Isolate 166 had a substitution mutation from alanine to valine at position 930 in the S2 subunits of the spike protein. These mutations could potentially alter the viral entry and infectivity, with implications for viral evolution and drug target design. Further studies are required to validate these findings and understand their impact on virus behavior. Evaluation of Code Quality and Reproducibility The selected article, “A global survey of potential acceptance of a COVID-19 vaccine”, examines global COVID-19 vaccine acceptance rates and factors influencing willingness to vaccinate, based on a survey of 13,426 people across 19 countries (Lazarus et al. 2021). The quality of the code from the selected study was examined by downloading the code from the OSF website and executing the code in R. The R code is designed to evaluate survey data on attitudes toward COVID-19 vaccination. The code includes data preprocessing, visualization, and statistic modeling. The code starts with loading a CSV file with the data and sets up various demographic and survey response variables, like gender, income, education, age group, and country. The data is transformed into categorical variables for better interpretation (“OSF COVID-19 Vaccine Paper” n.d.). The analysis covers two main survey question: one about the willingness to follow an employers recommendation and the other about the willingness to take the vaccine after it was proven safe and effective. The responses to these questions are visualized in bar graphs segmented by demographics and country. Logistic regression models are used to show the relationship between demographic factors and the acceptance of the vaccines by country. To successfully execute the code, I made several adjustments: I modified the file path to the data, I commented out the case factor because it wasn’t necessary to proceed with the code, and I commented out the ggsave() function because this was also not necessary to proceed with the code and the given file path didn’t exist. To save the pdf file it is also possible to change the file path. Lastly, I installed the tableone package because it wasn’t installed yet. Overall, it was easy to reproduce the code. I would score the reproducibility of the visualization of this project at a 4, with 1 being very hard and 5 being very easy. Below you can find some examples from the R code generating figures “Business by country by income” and “Vaccine by country by education”. Set up # Load necessary libraries library(tidyverse) library(MASS) library(here) Business by country by income data$Busines2_fct &lt;- factor(data$Business2, levels = c( 1, 2, 3, 4, 5 ), labels = c( &quot;Completely disagree&quot;, &quot;Somewhat disagree&quot;, &quot;Neutral/no opinion&quot;, &quot;Somewhat agree&quot;, &quot;Completely agree&quot; )) summary(data$Busines2_fct) ## Completely disagree Somewhat disagree Neutral/no opinion Somewhat agree ## 1179 2299 3488 4579 ## Completely agree ## 1881 inc &lt;- ggplot( data = data )+ geom_bar(aes( x = country_name, fill = Busines2_fct ), stat = &#39;count&#39;, position = &#39;fill&#39;)+ facet_wrap(~ww_fct)+ theme(axis.text.x = element_text(angle = 90, size = 10))+ coord_flip()+ labs(title = &quot;Business by country by income&quot;)+ ylab(&quot;Proportion&quot;)+ xlab(&quot;Country&quot;)+ scale_fill_brewer(&quot;Response&quot;, type = &quot;div&quot;, palette = 4) inc Figuur 1. Business by country by income. Vaccine by country by education data$Vaccine_fct &lt;- factor(data$Vaccine, levels = c( 1, 2, 3, 4, 5 ), labels = c( &quot;Completely disagree&quot;, &quot;Somewhat disagree&quot;, &quot;Neutral/no opinion&quot;, &quot;Somewhat agree&quot;, &quot;Completely agree&quot; )) summary(data$Vaccine_fct) ## Completely disagree Somewhat disagree Neutral/no opinion Somewhat agree ## 1091 819 1912 3318 ## Completely agree ## 6286 educ &lt;- ggplot( data = data )+ geom_bar(aes( x = country_name, fill = Vaccine_fct ), stat = &#39;count&#39;, position = &#39;fill&#39;)+ facet_wrap(~educ_fact)+ theme(axis.text.x = element_text(angle = 90, size = 10))+ coord_flip()+ labs(title = &quot;Vaccine by country by education&quot;)+ ylab(&quot;Proportion&quot;)+ xlab(&quot;Country&quot;)+ scale_fill_brewer(&quot;Response&quot;, type = &quot;div&quot;, palette = 4) educ Figuur 2. Vaccine by country by education. "],["creating-r-packages.html", "Creating R Packages Developing the HittersAnalytics Package Installing the HittersAnalytics Package Examples of the functions in the HittersAnalytics Package", " Creating R Packages I developed a R package to do analysis on the Hitters data set that is part of the ISLR package. With this package it is possible tot summarize several variables, calculate correlations between variables, produce the top 10 of several variables, and create scatterplots between variables. Developing the HittersAnalytics Package The development of the HittersPackage began with the creation of a new R package project using devtools. By calling create_package(“HittersAnalytics), I established the basic structure of the package. This automatically generated the necessary files and directories, making the project compatible with Rstudio as both an R source package and an Rstudio project. Following this, I initialized the package as a Git repository using use_git() to enable version control. I implented the first function in the package and generated documentation using devtools::document(). The check() function was run to identify and resolve any errors, warnings, or notes in the package. After resolving all issues, I configured the license using use_mit_license(), establishing the package’s licensing terms. Next, I expanded the package funtionality by adding three additional functions, one at a time. For each function, I generated the necessary documentation using devtools::document() and performerd testing using check(). Any issues that arose were resolved before moving on to the next step, ensuring the package remained error-free. Once all functions were complete, I installed the package locally with install() and verified its functionality by loading it with library(HittersAnalytics). To support testing, I initialized the testthat framework using use_testthat(). This allowed me to develop and execute unit tests for the package, further enhancing its reliability. To provide users with guidance and examples, I developed a vignette for the package. Using Rmarkdown, I created a .Rmd file and placed it in the vignettes/ directory of the package, ensuring it was formatted with the appropriate YAML header. I made the vignette accessible by adding a specific line of the DESCRIPTION file, built it using devtools, and confirmed its accessibility through the browseVignettes() and vignette() functions for the HittersAnalytics package. To prepare the package for public distribution, I configured it for GitHub integration using use_github(). Additionally, I created a README.md file using use_readme_rmd(), which provided an overview of the package’s purpose and usage. The build_readme() function was called to generate the rendered README file. Throughout this process, I ran check() regularly to confirm that the package met all standards and guidelines. Finally, I installed the package again and conducted a final review to ensure it was fully functional and ready to use. By following these steps, I succesfully developed the HittersAnalytics package. Installing the HittersAnalytics Package To install the HittersAnalytics Package follow the following steps: # Install the ISLR package (if needed) install.packages(&quot;ISLR&quot;) # Install the devtools package (if needed) install.packages(&quot;devtools&quot;) # Install the HittersAnalytics package devtools::install_github(&quot;philinevbekkum/HittersAnalytics&quot;) # To install the HittersAnalytics package with the vignette use the following devtools::install_github(&quot;philinevbekkum/HittersAnalytics&quot;, build_vignettes = TRUE) # Load necessary libraries library(ISLR) library(HittersAnalytics) library(dplyr) library(ggplot2) # Load the dataset data(Hitters) Examples of the functions in the HittersAnalytics Package Once the necessary packages, libraries, and dataset are installed and loaded, the package is ready to use. Below you can find an example demonstrating each function included in the package. The variables in the examples can be substituted with any column from the Hitters dataset as needed. # Summarize a variable summarize_variable(Hitters, &quot;Salary&quot;) ## $summary ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 67.5 190.0 425.0 535.9 750.0 2460.0 ## ## $mean ## [1] 535.9259 ## ## $median ## [1] 425 ## ## $sd ## [1] 451.1187 ## ## $min ## [1] 67.5 ## ## $max ## [1] 2460 # Get the top 10 of a variable top_10_variable(Hitters, &quot;Runs&quot;) ## Player Runs ## -Rickey Henderson Rickey Henderson 130 ## -Kirby Puckett Kirby Puckett 119 ## -Don Mattingly Don Mattingly 117 ## -Joe Carter Joe Carter 108 ## -Alan Trammell Alan Trammell 107 ## -Jesse Barfield Jesse Barfield 107 ## -Tony Gwynn Tony Gwynn 107 ## -Von Hayes Von Hayes 107 ## -Wade Boggs Wade Boggs 107 ## -Oddibe McDowell Oddibe McDowell 105 # Calculate the correlation between two variables calculate_correlation(Hitters, &quot;Years&quot;, &quot;Hits&quot;) ## [1] 0.04476656 # Plot a scatterplot of two variables scatterplot(&quot;Years&quot;, &quot;Hits&quot;) Figure 1. Scatterplot of two variables. "],["project-hack-the-vitek.html", "Project “Hack the VITEK” VITEK®2 Compact Hack the VITEK", " Project “Hack the VITEK” VITEK®2 Compact The VITEK®2 Compact, from bioMérieux, is an automatized microbiological system for identification and antibiotic susceptibility testing of microorganisms based on growth. (Jia, Li, and Wang 2014) This system uses colorimetric reagent cards which measure optical density and color change at different wavelengths. (Wallet et al. 2005) Identification cards have 64 wells for a variety of metabolic tests, such as enzymatic reactions, growth in specific media, and changes in pH. The measurements are done every 15 minutes until the maximum incubation time is reached. (Jia, Li, and Wang 2014) The AST card is used in the sensitivity test, while the result is read as sensitive, intermediate, or resistant using EUCAST guidelines for the MIC. (Humphries et al. 2021) Every card tests approximately 19 antibiotics at different concentrations and also contains a growth control. The MIC is calculated using OD values and the growth rate of the microorganism based on known calibration measurements from the database. The VITEK®2 utilizes an Expert System-AES-that provides guidelines for the interpretation of antibiotic results and the detection of resistance mechanisms. Each card has a barcode for identification and a pre-placed transfer tube for inoculation. Microorganisms are transferred to a sterile saline solution, the turbidity of which is adjusted to the correct McFarland value. (Ligozzi et al. 2002) The inoculated cards are then placed in a vacuum station where the suspension is pressed into the test openings of the card. The transfer tube is cut and the cards placed in a carousel incubator where they are incubated at 35.5 ± 1.0 ºC. Results are read every 15 minutes and are displayed as “+”, “-”, “(-)” or “(+)”, in which the parentheses denote if the reaction result is too near the threshold. The databases of the VITEK®2 consist of well-characterized microorganisms. The test data from the unknown organisms are compared with these databases to identify the organism. If the discrimination is low, several possible organisms will appear, and further tests may be necessary to obtain a definite identification. Several cards are available for the identification of different types of organisms. GN cards are utilized for Gram-negative rods, including 135 fermenting and non-fermenting Gram-negative bacilli, and contain 47 biochemical tests, plus one negative. GP cards are utilized for Gram-positive cocci and bacilli and are focused on 115 non-spore-forming Gram-positive bacteria, mainly cocci, containing 43 biochemical tests. The NH cards are specific for identification of the slow-growing Gram-negative bacteria, the YST card is for yeast identification, the BCL cards are used to identify Bacillus spp. while ANC is utilized in identifying anaerobes and microaerophilic bacteria. (Pincus, n.d.) Hack the VITEK The goal of this project is to design a tool that enhances the utility of the raw data output from the VITEK®2 system. While the final report from the VITEK®2 delivers a quick summary of microbial identification and antibiotic susceptibility, it lacks the ability to explain how such conclusions were drawn. This would further enable the visualization of reaction kinetics and improve the identification accuracy and reliability. Development of an RShiny dashboard will be done, allowing researchers to upload raw log files from the VITEK®2 to view signal change of each well over time. This dashboard will then allow researchers to study dynamic changes in microbial growth patterns that can help identify which variable-specific wells are best for microorganism identification. "],["parameterized-report-of-covid-19-data-from-ecdc.html", "Parameterized Report of COVID-19 data from ECDC Set up Load and filter the COVID-19 dataset Plots of the COVID-19 dataset", " Parameterized Report of COVID-19 data from ECDC This report provides an analysis of COVID-19 data sourced from the European Centre for Disease Prevention and Control (ECDC). By utilizing a parameterized RMarkdown report, the data can be dynamically tailored to specific parameters, such as different countries, years, and time periods in months. Designed to focus on three critical parameters—country, year, and months—the report uses data on the daily number of new reported COVID-19 cases and deaths by EU/EEA country. The data can be accessed at (“Data on the Daily Number of New Reported COVID-19 Cases and Deaths by EU/EEA Country” 2022). Set up # Load necessary libraries library(here) library(readr) library(dplyr) library(ggplot2) library(lubridate) library(plotly) Load and filter the COVID-19 dataset First, the COVID-19 dataset needs to be prepared for analysis. The date column is transformed to the right format, and the data is filtered based on the given parameters. # Load the dataset covid_data &lt;- read_csv(here::here(&quot;data&quot;, &quot;COVID_data.csv&quot;)) head(covid_data$dateRep) ## [1] &quot;23/10/2022&quot; &quot;22/10/2022&quot; &quot;21/10/2022&quot; &quot;20/10/2022&quot; &quot;19/10/2022&quot; &quot;18/10/2022&quot; str(covid_data$dateRep) ## chr [1:28729] &quot;23/10/2022&quot; &quot;22/10/2022&quot; &quot;21/10/2022&quot; &quot;20/10/2022&quot; &quot;19/10/2022&quot; ... # Convert dateRep to Date format covid_data &lt;- covid_data %&gt;% mutate( dateRep = dmy(dateRep) # Convert date column to Date format ) covid_data ## # A tibble: 28,729 × 11 ## dateRep day month year cases deaths countriesAndTerritories geoId ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2022-10-23 23 10 2022 3557 0 Austria AT ## 2 2022-10-22 22 10 2022 5494 4 Austria AT ## 3 2022-10-21 21 10 2022 7776 4 Austria AT ## 4 2022-10-20 20 10 2022 8221 6 Austria AT ## 5 2022-10-19 19 10 2022 10007 8 Austria AT ## 6 2022-10-18 18 10 2022 13204 7 Austria AT ## 7 2022-10-17 17 10 2022 9964 8 Austria AT ## 8 2022-10-16 16 10 2022 6606 12 Austria AT ## 9 2022-10-15 15 10 2022 8818 6 Austria AT ## 10 2022-10-14 14 10 2022 11751 10 Austria AT ## # ℹ 28,719 more rows ## # ℹ 3 more variables: countryterritoryCode &lt;chr&gt;, popData2020 &lt;dbl&gt;, continentExp &lt;chr&gt; # Filter data based on parameters filtered_data &lt;- covid_data %&gt;% filter( countriesAndTerritories == params$country, year(dateRep) == params$year, month(dateRep) %in% params$months ) # Display the filtered data print(filtered_data) ## # A tibble: 181 × 11 ## dateRep day month year cases deaths countriesAndTerritories geoId ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2021-06-30 30 6 2021 776 24 Italy IT ## 2 2021-06-29 29 6 2021 677 42 Italy IT ## 3 2021-06-28 28 6 2021 387 28 Italy IT ## 4 2021-06-27 27 6 2021 780 14 Italy IT ## 5 2021-06-26 26 6 2021 838 40 Italy IT ## 6 2021-06-25 25 6 2021 751 56 Italy IT ## 7 2021-06-24 24 6 2021 266 28 Italy IT ## 8 2021-06-23 23 6 2021 1140 12 Italy IT ## 9 2021-06-22 22 6 2021 834 31 Italy IT ## 10 2021-06-21 21 6 2021 484 21 Italy IT ## # ℹ 171 more rows ## # ℹ 3 more variables: countryterritoryCode &lt;chr&gt;, popData2020 &lt;dbl&gt;, continentExp &lt;chr&gt; # Display the first few rows of filtered data head(filtered_data) ## # A tibble: 6 × 11 ## dateRep day month year cases deaths countriesAndTerritories geoId ## &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2021-06-30 30 6 2021 776 24 Italy IT ## 2 2021-06-29 29 6 2021 677 42 Italy IT ## 3 2021-06-28 28 6 2021 387 28 Italy IT ## 4 2021-06-27 27 6 2021 780 14 Italy IT ## 5 2021-06-26 26 6 2021 838 40 Italy IT ## 6 2021-06-25 25 6 2021 751 56 Italy IT ## # ℹ 3 more variables: countryterritoryCode &lt;chr&gt;, popData2020 &lt;dbl&gt;, continentExp &lt;chr&gt; Plots of the COVID-19 dataset Below you can find the different plots that were generated with the filtered data. # Interactive cases over time plot ggplot_cases &lt;- ggplot(filtered_data, aes(x = dateRep, y = cases)) + geom_line(color = &quot;navy&quot;) + labs( title = paste(&quot;COVID-19 Cases in&quot;, params$country, &quot;in&quot;, params$year), x = &quot;Date&quot;, y = &quot;Cases&quot; ) + theme_minimal() ggplotly(ggplot_cases) Figure 1. Cases over time. # Interactive deaths over time plot ggplot_deaths &lt;- ggplot(filtered_data, aes(x = dateRep, y = deaths)) + geom_line(color = &quot;darkred&quot;) + labs( title = paste(&quot;COVID-19 Deaths in&quot;, params$country, &quot;in&quot;, params$year), x = &quot;Date&quot;, y = &quot;Deaths&quot; ) + theme_minimal() ggplotly(ggplot_deaths) Figure 2. Deaths over time. # Calculate the mean cases and deaths and filter the data filtered_data_mean &lt;- filtered_data %&gt;% mutate(week = isoweek(dateRep)) %&gt;% group_by(week) %&gt;% summarize( avg_cases = mean(cases, na.rm = TRUE), avg_deaths = mean(deaths, na.rm = TRUE) ) # Interactive weekly averages plot ggplot_weekly_averages &lt;- ggplot(filtered_data_mean, aes(x = week, y = avg_cases)) + geom_col(fill = &quot;darkorange&quot;) + labs( title = paste(&quot;Weekly Average COVID-19 Cases in&quot;, params$country, &quot;in&quot;, params$year), x = &quot;Week&quot;, y = &quot;Average Cases&quot; ) + theme_minimal() ggplotly(ggplot_weekly_averages) Figure 3. Weekly averages over time. # Calculate the cases and deaths per 100k filtered_data_normalization &lt;- filtered_data %&gt;% mutate( cases_per_100k = (cases / popData2020) * 100000, deaths_per_100k = (deaths / popData2020) * 100000 ) # Interactive cases per 100k plot ggplot_cases_per_100k &lt;- ggplot(filtered_data_normalization, aes(x = dateRep, y = cases_per_100k)) + geom_line(color = &quot;darkgreen&quot;) + labs( title = paste(&quot;COVID-19 Cases per 100,000 in&quot;, params$country, &quot;in&quot;, params$year), x = &quot;Date&quot;, y = &quot;Cases per 100,000&quot; ) + theme_minimal() ggplotly(ggplot_cases_per_100k) Figure 4. Cases per 100.000. "],["bibliography.html", "Bibliography", " Bibliography “Antimicrobial Resistance Data.” n.d. https://www.kaggle.com/datasets/amritpal333/antimicrobial-resistance-data. Accessed January 3, 2025. Coster, Wouter De. 2024a. “Wdecoster/Nanofilt.” ———. 2024b. “Wdecoster/NanoPlot.” “Data on the Daily Number of New Reported COVID-19 Cases and Deaths by EU/EEA Country.” 2022. https://www.ecdc.europa.eu/en/publications-data/data-daily-new-cases-covid-19-eueea-country. “ERR10367339 : Run Browser : SRA Archive : NCBI.” n.d. https://trace.ncbi.nlm.nih.gov/Traces/index.html?view=run_browser&amp;acc=ERR10367339&amp;display=metadata. Accessed January 3, 2025. “How to Conduct AMR Data Analysis.” n.d. https://msberends.github.io/AMR/articles/AMR.html#availability-of-species. Accessed January 2, 2025. Humphries, Romney, Shelley Campeau, Thomas E. Davis, Kristin J. Nagaro, Vincent J. LaBombardi, Simone Franklin, Lisa Heimbach, and Hari P. Dwivedi. 2021. “Multicenter Evaluation of Ceftazidime-Avibactam Susceptibility Testing of Enterobacterales and Pseudomonas Aeruginosa on the Vitek 2 System.” Edited by Patricia J. Simner. Journal of Clinical Microbiology 59 (3): e01870–20. https://doi.org/10.1128/JCM.01870-20. Jia, Wei, Gang Li, and Wen Wang. 2014. “Prevalence and Antimicrobial Resistance of Enterococcus Species: A Hospital-Based Study in China.” International Journal of Environmental Research and Public Health 11 (3): 3424–42. https://doi.org/10.3390/ijerph110303424. Lazarus, Jeffrey V., Scott C. Ratzan, Adam Palayew, Lawrence O. Gostin, Heidi J. Larson, Kenneth Rabin, Spencer Kimball, and Ayman El-Mohandes. 2021. “A Global Survey of Potential Acceptance of a COVID-19 Vaccine.” Nature Medicine 27 (2): 225–28. https://doi.org/10.1038/s41591-020-1124-9. Ligozzi, Marco, Cinzia Bernini, Maria Grazia Bonora, Maria De Fatima, Jessica Zuliani, and Roberta Fontana. 2002. “Evaluation of the VITEK 2 System for Identification and Antimicrobial Susceptibility Testing of Medically Relevant Gram-Positive Cocci.” Journal of Clinical Microbiology 40 (5): 1681–86. https://doi.org/10.1128/JCM.40.5.1681-1686.2002. “OSF COVID-19 Vaccine Paper.” n.d. https://osf.io/kzq69/. Accessed January 3, 2025. Pincus, David H. n.d. “MICROBIAL IDENTIFICATION USING THE BIOMÉRIEUX VITEK 2 SYSTEM.” “Reproducibility and Reporting Practices in COVID-19 Preprint Manuscripts.” n.d. CoLab. https://colab.ws/articles/10.1101%2F2020.03.24.20042796. Accessed January 3, 2025. Saha, Priyanka, Arup Kumar Banerjee, Prem Prakash Tripathi, Amit Kumar Srivastava, and Upasana Ray. 2020. “A Virus That Has Gone Viral: Amino Acid Mutation in S Protein of Indian Isolate of Coronavirus COVID-19 Might Impact Receptor Binding, and Thus, Infectivity.” Bioscience Reports 40 (5): BSR20201312. https://doi.org/10.1042/BSR20201312. Wallet, Frédéric, Caroline Loïez, Emilie Renaux, Nadine Lemaitre, and René J. Courcol. 2005. “Performances of VITEK 2 Colorimetric Cards for Identification of Gram-Positive and Gram-Negative Bacteria.” Journal of Clinical Microbiology 43 (9): 4402–6. https://doi.org/10.1128/JCM.43.9.4402-4406.2005. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
