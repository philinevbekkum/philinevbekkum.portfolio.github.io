[["index.html", "Portfolio Data Science for Biology Introduction", " Portfolio Data Science for Biology Philine van Bekkum Introduction This GitHub page is written by Philine van Bekkum. I am a third-year Life Science student at University of Applied Sciences Utrecht. I have followed the minor Data Science for Biology, where I developed expertise in data analysis, bioinformatics, and reproducible workflows. This portfolio shows my Data Science skills through various projects. "],["curriculum-vitae.html", "Curriculum Vitae Personal Information Education Work Experience Skills Theoretical Knowledge Languages Hobbies", " Curriculum Vitae Personal Information Name: Philine van Bekkum Address: [Your Address] Phone: [Your Phone Number] E-mail: [your.email@example.com] DOB/POB: [Your DOB/POB] Nationality: [Your Nationality] Education BSc Life Sciences University of Applied Sciences Utrecht, Utrecht, Netherlands 2020 - Present Specialisation: Biomolecular Research Project BMR: The Influence of an Angle on 3D Extrusion-Based Bioprinting Minors: Data Science for Biology Finance for Non-Financials HAVO Revius Lyceum, Doorn, Netherlands 2015 - 2020 Senior General Secondary Education Curriculum: “Nature &amp; Technology” and “Nature &amp; Health” Work Experience Student Assistant in Medical Microbiology, Molecular Diagnostics UMC Utrecht, Utrecht, Netherlands 2022 - Present Performing supportive lab tasks (inventory management, maintenance, and cleaning duties). Skills Laboratory Skills Molecular Biology: PCR (Colony, Quantitative, Real-Time), Agarose Gel Electrophoresis, Miniprep, Transfection, SDS-PAGE, Western Blot Genes &amp; Proteins: ELISA, Cell Fractionation, Liquid Chromatography Experimental Design in Cell Culture: Cell Culture Data Science Skills Programming &amp; Tools: R, RStudio, RMarkdown, RBookdown, RPackage, Git/GitHub, Bash Data Analysis: SQL, Frequentist Statistics Bioinformatics Pipelines: RNAseq pipeline in R, Metagenomics pipeline in R Theoretical Knowledge Immunology Molecular Biology Biotechnology Advanced Labtools Tumor Cell Biology Languages Dutch: Native English: Intermediate Hobbies Running Reading Drawing Playing the piano Below you can also find a pdf file of my CV. "],["identificatie-van-antibiotica-resistentie-genen-in-bacteriën-via-wgs-oxford-nanopore-sequencing.html", "Identificatie van antibiotica resistentie genen in bacteriën via WGS Oxford Nanopore sequencing Stap 1: Selecteren van de dataset Stap 2: Kwaliteitscontrole Stap 3: Identificatie van antibiotica resistentie genen Stap 4: Data visualisatie References", " Identificatie van antibiotica resistentie genen in bacteriën via WGS Oxford Nanopore sequencing Tijdens mijn stage ga ik bacteriën whole genome sequencen met de Oxford Nanopore om antibiotica resistentie genen in deze bacteriën te identificeren. Het doel van dit project is daarom om een data analyse pipeline te maken die gebruik maakt van Oxford Nanopore whole genome sequencing (WGS) data om antibiotica resistentie genen in bacteriën te identificeren. Dit dient als voorbereiding op mijn toekomstige stage, zodat ik later deze pipeline kan gebruiken om de data die ik tijdens mijn stage heb verkregen te analyseren. Stap 1: Selecteren van de dataset De eerste stap is om een dataset op te zoeken via bijv. NCBI Sequence Read Archive (SRA) of European Nucleotide Archive (ENA). De geselecteerde dataset moet een FastQ format zijn en afkomstig zijn van whole genome sequencing met Oxford Nanopore technology. Stap 2: Kwaliteitscontrole Na het selecteren van de dataset kan een kwaliteitscontrole worden uitgevoerd. Hiervoor kan gebruik gemaakt worden van FastQC in bash. FastQC geeft inzicht in kwaliteitscores en de aanwezigheid van adaptersequenties. Na het gebruik van FastQC kan Nanoplot worden gebruikt voor meer gedetailleerde informatie over de kwaliteit van de sequencing reads die specifiek zijn voor Nanopore data. Vervolgens kan Nanofilt worden gebruikt om korte sequencing reads of reads van lage kwaliteit te verwijderen. Stap 3: Identificatie van antibiotica resistentie genen Na de kwaliteitscontrole kunnen de reads worden geanalyseerd met behulp van de AMR package in R. De AMR package wordt gebruikt om antibiotica resistentie genen te identificeren in sequencing reads. Dit wordt gedaan door de sequencing reads te vergelijken met een database die bekende resistentie genen bevat. Stap 4: Data visualisatie Als laatste kunnen de resulteren worden weergegeven in bijv. een bar plot met de antibiotica resistentie genen en een heatmap met de genen die aanwezig of afwezig zijn. References Antimicrobial Resistance data analysis. (z.d.). https://msberends.github.io/AMR/ Bioinformatics for Beginners. (2023, 22 juni). Quality Control of Long Reads Data using NanoPlot and FiltLong [Video]. YouTube. https://www.youtube.com/watch?v=Zf0xX2CqkLw De Coster, W., D’Hert, S., Schultz, D. T., Cruts, M., &amp; Van Broeckhoven, C. (2018). NanoPack: visualizing and processing long-read sequencing data. Bioinformatics, 34(15), 2666–2669. https://doi.org/10.1093/bioinformatics/bty149 Embl-Ebi. (z.d.). ENA Browser. https://www.ebi.ac.uk/ena/browser/home Galaxy Training Network. (2024, 13 maart). Assembly / Genome Assembly of MRSA from Oxford Nanopore MinION data (and optionally Illumina data) / Hands-on: Genome Assembly of MRSA from Oxford Nanopore MinION data (and optionally Illumina data). https://training.galaxyproject.org/training-material/topics/assembly/tutorials/mrsa-nanopore/tutorial.html#assembly Home - SRA - NCBI. (z.d.). https://www.ncbi.nlm.nih.gov/sra NanoFilt | Anaconda.org. (z.d.). https://anaconda.org/bioconda/nanofilt Nanoplot | Anaconda.org. (z.d.). https://anaconda.org/bioconda/nanoplot "],["guerilla-analytics.html", "Guerilla analytics", " Guerilla analytics "],["c.-elegans-plate-experiment.html", "C. elegans Plate Experiment Introduction Set up Importing the data Inspecting the data types Scatterplot of C. elegans plate experiment Normalizing the data for the negative control Scatterplot of C. elegans plate experiment with normalized data Dosis-response analysis using the drc package", " C. elegans Plate Experiment Introduction The data presented in this document was kindly provided by J. Louter (INT/ILC) and stems from an experiment that investigated the effect of various compounds on C. elegans nematodes. In this experiment, adult C. elegans were exposed to different concentrations of compounds, and the number of offspring produced by each nematode was counted. The key variables in this dataset include: RawData: The number of offspring counted (the outcome). compName: The name of the compound or chemical used in the experiment. compConcentration: The concentration of the compound (in nM). expType: The type of experimental condition (e.g., positive control, negative control, vehicle A control, experiment). Set up library(readxl) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) library(drc) ## Loading required package: MASS ## ## Attaching package: &#39;MASS&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## select ## ## &#39;drc&#39; has been loaded. ## Please cite R and &#39;drc&#39; if used for a publication, ## for references type &#39;citation()&#39; and &#39;citation(&#39;drc&#39;)&#39;. ## ## Attaching package: &#39;drc&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## gaussian, getInitial library(readr) library(stringr) library(tidyr) Importing the data The first step is to import the data from the provided Excel file, which contains the results of the experiment. # Import data from C. elegans plate experiment plate_experiment_data &lt;- read_excel(&quot;data/CE.LIQ.FLOW.062_Tidydata.xlsx&quot;) Inspecting the data types Next, we inspect the structure of the data to ensure it has been imported correctly. We also check for the data types of key columns. # Check the structure of the data. print(class(plate_experiment_data$RawData)) ## [1] &quot;numeric&quot; print(class(plate_experiment_data$compName)) ## [1] &quot;character&quot; print(class(plate_experiment_data$compConcentration)) ## [1] &quot;character&quot; print(class(plate_experiment_data$expType)) ## [1] &quot;character&quot; # Check if data is correctly imported. plate_experiment_data %&gt;% dplyr::select(RawData, compName, compConcentration, expType) ## # A tibble: 360 × 4 ## RawData compName compConcentration expType ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 44 2,6-diisopropylnaphthalene 4.99 experiment ## 2 37 2,6-diisopropylnaphthalene 4.99 experiment ## 3 45 2,6-diisopropylnaphthalene 4.99 experiment ## 4 47 2,6-diisopropylnaphthalene 4.99 experiment ## 5 41 2,6-diisopropylnaphthalene 4.99 experiment ## 6 35 2,6-diisopropylnaphthalene 4.99 experiment ## 7 41 2,6-diisopropylnaphthalene 4.99 experiment ## 8 36 2,6-diisopropylnaphthalene 4.99 experiment ## 9 40 2,6-diisopropylnaphthalene 4.99 experiment ## 10 38 2,6-diisopropylnaphthalene 4.99 experiment ## # ℹ 350 more rows plate_experiment_tidydata &lt;- plate_experiment_data plate_experiment_tidydata$compConcentration &lt;- as.numeric(plate_experiment_tidydata$compConcentration) ## Warning: NAs introduced by coercion There is a small issue with the compConcentration column where a comma (,) was mistakenly used instead of a period (.), resulting in NA values. We correct this by replacing the comma with a period and ensuring all values are numeric. # Locate the NA value in the compConcentration column. character_placement &lt;- which(is.na(plate_experiment_tidydata$compConcentration)) # Convert the character value to numeric, handling commas. character_value &lt;- plate_experiment_data$compConcentration[character_placement] %&gt;% str_replace(&quot;,&quot;, &quot;.&quot;) %&gt;% parse_number() # Update the compConcentration column plate_experiment_tidydata$compConcentration[character_placement] &lt;- character_value # Check the class of compConcentration after conversion. print(class(plate_experiment_tidydata$compConcentration)) ## [1] &quot;numeric&quot; # Check for any NA values after conversion sum(is.na(plate_experiment_tidydata$compConcentration)) ## [1] 0 Scatterplot of C. elegans plate experiment To visualize the effect of compound concentration on offspring count, a scatterplot was created. The x-axis represents the log-transformed concentration of the compound (in nM), and the y-axis represents the raw number of offspring. The points are color-coded by the compound name and shaped by the experimental condition type. plate_experiment_tidydata %&gt;% ggplot(aes(x = log10(compConcentration), y = RawData, color = compName, shape = expType)) + geom_jitter(width = 0.1, height = 0.1) + labs(x = &quot;Log10 Concentration of Compound (in nM)&quot;, y = &quot;Number of Offspring per C. elegans&quot;, color = &quot;Compound Name&quot;, shape = &quot;Experiment Type&quot;, title = &quot;Effect of Compound Concentration on Offspring Count in C. elegans&quot;, subtitle = &quot;Data provided by J. Louter (INT/ILC)&quot;) + scale_shape_discrete(labels = c(&quot;Negative Control&quot;, &quot;Positive Control&quot;, &quot;Vehicle A Control&quot;, &quot;Experiment&quot;)) + theme_classic() ## Warning: Removed 5 rows containing missing values or values outside the scale range ## (`geom_point()`). Figuur 1. Scatterplot showing the effect of compound concentration on offspring count in C. elegans across different experimental conditions. The positive control of this experiment is “Ethanol”. The negative control of this experiment is “No treatment”. Normalizing the data for the negative control To facilitate comparison across experimental conditions, we normalize the raw offspring counts relative to the negative control group (“S-medium”). This adjustment accounts for baseline variability and enables more accurate comparisons between experimental conditions. # Compute the mean for the negative control group &quot;S-medium&quot;. mean_controlNegative &lt;- mean(plate_experiment_tidydata$RawData [plate_experiment_tidydata$compName == &quot;S-medium&quot;], na.rm = TRUE) # Create RawData_normalized column with the normalized raw data. plate_experiment_tidydata$RawData_normalized &lt;- plate_experiment_tidydata$RawData / mean_controlNegative # Compute the mean of the normalized data for the negative control group. mean(plate_experiment_tidydata$RawData [plate_experiment_tidydata$compName == &quot;S-medium&quot;], na.rm = TRUE) ## [1] 85.9 Scatterplot of C. elegans plate experiment with normalized data With the data normalized, we can generate another scatterplot to visualize the relationship between compound concentration and offspring count. This time, the y-axis reflects the normalized number of offspring. plate_experiment_tidydata %&gt;% ggplot(aes(x = log10(compConcentration), y = RawData_normalized, color = compName, shape = expType)) + geom_jitter(width = 0.1, height = 0.1) + labs(x = &quot;Log10 Concentration of Compound (in nM)&quot;, y = &quot;Normalized Number of Offspring per C. elegans&quot;, color = &quot;Compound Name&quot;, shape = &quot;Experiment Type&quot;, title = &quot;Effect of Compound Concentration on Offspring Count in C. elegans&quot;, subtitle = &quot;Data provided by J. Louter (INT/ILC)&quot;) + scale_shape_discrete(labels = c(&quot;Negative Control&quot;, &quot;Positive Control&quot;, &quot;Vehicle A Control&quot;, &quot;Experiment&quot;)) + theme_classic() ## Warning: Removed 5 rows containing missing values or values outside the scale range ## (`geom_point()`). Figuur 2. Scatterplot of the effect of compound concentration on normalized offspring count in C. elegans. The normalization process makes it easier to compare the effects of different compounds, accounting for baseline differences in offspring count. Dosis-response analysis using the drc package "],["open-peer-review.html", "Open Peer Review Evaluation of Transparency and Reproducibility Evaluation of Code Quality and Reproducibility", " Open Peer Review Evaluation of Transparency and Reproducibility The selected article, “A virus that has gone viral: Amino acid mutation in S protein of Indian isolate of Coronavirus COVID-19 might impact receptor binding and thus infectivity”, examines amino acid mutations in the spike protein of SARS-CoV-2 isolates from India and their potential impact on receptor binding and infectivity. (Saha et al., 2020) The transparency of the selected study was evaluated based on predefined criteria for reproducibility and reporting practices, as described by Summer et al. (2020) in their work on reproducibility and reporting practices in COVID-19 preprint manuscripts. The table below summaries the findings. Table 1. Transparency Criteria Transparency Criteria Response Type Study Purpose TRUE Data Availability Statement FALSE Data Location GenBank Study Location TRUE; India Author Review Professional; Contact information is available Ethics Statement FALSE Funding Statement TRUE Code Availability FALSE General Aim The general aim of this article was to analyze and compare mutations in the spike protein Indian SARS-CoV-2 isolates compared to Wuhan and Italian isolates, to identify notable features, especially mutations that could affect viral infectivity. Methods The researchers obtained complete spike protein sequences of SARS-CoV-2 from GenBank, including sequences 17 sequences from Wuhan, one from Italy, and two from India (isolates 29 and 166). Sequence alignments were performed using NCBI BLAST, CLUSTAL W, and CLUSTAL OMEGA. Secondary structure prediction was done using CFSSP server, and mutation analysis was done using Mutprep server. JMol and ConSurf tools were used to predict protein structure. Further kinetics and structure analyses were performed using Dynemut Server and Chimera version 11. Results All 17 sequences from Wuhan were identical and matched completely with the sequence from Italy. However two Indian isolates (29 en 166) showed notable mutations. Isolate 19 had a deletion mutation of tyrosine at position 144 and a substitution mutation from arginine to isoleucine at position 407, affecting the receptor-binding domain. Isolate 166 had a substitution mutation from alanine to valine at position 930 in the S2 subunits of the spike protein. These mutations could potentially alter the viral entry and infectivity, with implications for viral evolution and drug target design. Further studies are required to validate these findings and understand their impact on virus behavior. Evaluation of Code Quality and Reproducibility The selected article, “A global survey of potential acceptance of a COVID-19 vaccine”, examines global COVID-19 vaccine acceptance rates and factors influencing willingness to vaccinate, based on a survey of 13,426 people across 19 countries. (Lazarus et al., 2020) The quality of the code from the selected study was examined by downloading the code from the OSF website and executing the code in R. The R code is designed to evaluate survey data on attitudes toward COVID-19 vaccination. The code includes data preprocessing, visualization, and statistic modeling. The code starts with loading a CSV file with the data and sets up various demographic and survey response variables, like gender, income, education, age group, and country. The data is transformed into categorical variables for better interpretation. (Palayew, 2020) The analysis covers two main survey question: one about the willingness to follow an employers recommendation and the other about the willingness to take the vaccine after it was proven safe and effective. The responses to these questions are visualized in bar graphs segmented by demographics and country. Logistic regression models are used to show the relationship between demographic factors and the acceptance of the vaccines by country. To successfully execute the code, I made several adjustments: I modified the file path to the data, I commented out the case factor because it wasn’t necessary to proceed with the code, and I commented out the ggsave() function because this was also not necessary to proceed with the code and the given file path didn’t exist. To save the pdf file it is also possible to change the file path. Lastly, I installed the tableone package because it wasn’t installed yet. Overall, it was easy to reproduce the code. I would score the reproducibility of the visualization of this project at a 4, with 1 being very hard and 5 being very easy. Below you can find some examples from the R code generating figures “Business by country by income” and “Vaccine by country by education”. The full modified code is available as an R script in the GitHub: philinevbekkum/dsfb_workflows_portfolio under scripts/reproducible_research. And the original Rmarkdown and data file are available at https://osf.io/kzq69/. Business by country by income data$Busines2_fct &lt;- factor(data$Business2, levels = c( 1, 2, 3, 4, 5 ), labels = c( &quot;Completely disagree&quot;, &quot;Somewhat disagree&quot;, &quot;Neutral/no opinion&quot;, &quot;Somewhat agree&quot;, &quot;Completely agree&quot; )) summary(data$Busines2_fct) ## Completely disagree Somewhat disagree Neutral/no opinion Somewhat agree ## 1179 2299 3488 4579 ## Completely agree ## 1881 inc &lt;- ggplot( data = data )+ geom_bar(aes( x = country_name, fill = Busines2_fct ), stat = &#39;count&#39;, position = &#39;fill&#39;)+ facet_wrap(~ww_fct)+ theme(axis.text.x = element_text(angle = 90, size = 10))+ coord_flip()+ labs(title = &quot;Business by country by income&quot;)+ ylab(&quot;Proportion&quot;)+ xlab(&quot;Country&quot;)+ scale_fill_brewer(&quot;Response&quot;, type = &quot;div&quot;, palette = 4) inc Figuur 1. Business by country by income. Vaccine by country by education data$Vaccine_fct &lt;- factor(data$Vaccine, levels = c( 1, 2, 3, 4, 5 ), labels = c( &quot;Completely disagree&quot;, &quot;Somewhat disagree&quot;, &quot;Neutral/no opinion&quot;, &quot;Somewhat agree&quot;, &quot;Completely agree&quot; )) summary(data$Vaccine_fct) ## Completely disagree Somewhat disagree Neutral/no opinion Somewhat agree ## 1091 819 1912 3318 ## Completely agree ## 6286 educ &lt;- ggplot( data = data )+ geom_bar(aes( x = country_name, fill = Vaccine_fct ), stat = &#39;count&#39;, position = &#39;fill&#39;)+ facet_wrap(~educ_fact)+ theme(axis.text.x = element_text(angle = 90, size = 10))+ coord_flip()+ labs(title = &quot;Vaccine by country by education&quot;)+ ylab(&quot;Proportion&quot;)+ xlab(&quot;Country&quot;)+ scale_fill_brewer(&quot;Response&quot;, type = &quot;div&quot;, palette = 4) educ Figuur 2. Vaccine by country by education. "],["references-1.html", "References", " References Lazarus, J. V., Ratzan, S. C., Palayew, A., Gostin, L. O., Larson, H. J., Rabin, K., Kimball, S., &amp; El-Mohandes, A. (2020). A global survey of potential acceptance of a COVID-19 vaccine. Nature Medicine, 27(2), 225–228. https://doi.org/10.1038/s41591-020-1124-9 Palayew, A. (2020, 4 oktober). COVID-19 Vaccine paper. OSF. https://osf.io/kzq69/ Saha, P., Banerjee, A. K., Tripathi, P. P., Srivastava, A. K., &amp; Ray, U. (2020). A virus that has gone viral: Amino acid mutation in S protein of Indian isolate of Coronavirus COVID-19 might impact receptor binding and thus infectivity. bioRxiv (Cold Spring Harbor Laboratory). https://doi.org/10.1101/2020.04.07.029132 Sumner, J., Haynes, L., Nathan, S., Hudson-Vitale, C., &amp; McIntosh, L. D. (2020). Reproducibility and reporting practices in COVID-19 preprint manuscripts. medRxiv (Cold Spring Harbor Laboratory). https://doi.org/10.1101/2020.03.24.20042796 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
